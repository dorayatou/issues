// 页面全链路优化手段
// 用户输入一个url发生了什么？
// 1、浏览器的地址栏输入url（直接在命令行中输入url），是输入到浏览器的url中，浏览器会检测url
// URL=协议+域名|IP+端口号+路径+参数+锚点
// https://www.baidu.com 1、协议 2、域名 3、端口号 4、路径（地址查询参数/hash是浏览器使用的，hash是不会发送到服务器的，查询参数是会发送到服务器的）
// 协议：http/https 
// 域名：DNS服务器->IP地址，各级缓存
// 端口号：请求的服务，80端口HTTP服务、443端口HTTPS服务、21端口FTP服务
// TCP/IP
// IP 是非常底层的协议，只负责把数据包传送到对方电脑，但是对方电脑并不知道把数据包交给哪个程序，是交给浏览器还是交给王者荣耀？
// 因此，需要基于 IP 之上开发能和应用打交道的协议，最常见的是用户数据包协议
// （User Datagram Protocol)，简称UDP和传输控制协议（Transmission Control Protocol）,简称TCP.

// web应用的性能优化/监控/分析方法
// 浏览器缓存：缓存是浏览器提供的功能，浏览器缓存分为强缓存和协商缓存，强缓存cache-control: max-age（以秒为单位）和Expires两个字段控制
// Expires是http 1版本的功能，它的值是一个时间戳，是一个绝对时间，这个时间戳是服务器的时间戳，但是浏览器比较的时候是根据浏览器自己的时间比较的
// 所以，Expires就出现了一个问题，两个时间的不一致
// cache-control是http1.1的标准，采用的相对时间，以s为单位。实际使用中会两个都用，主要是考虑到向下兼容，旧版本的浏览器也能使用强缓存功能
// 当两个都存在的时候，cache-control的优先级高于expires。这个是浏览器决定的
// 协商缓存
// 协商缓存依赖于浏览器与服务器之间的通信。浏览器（带着If-none-match和If-last-modified）去向服务器请求是否可以使用本地的缓存
// 如果服务器判断浏览器的缓存可以使用，则返回304头。浏览器接到该头就会直接使用本地的缓存。否则，服务器返回新的资源。
// 根据不同的资源设置不同的缓存策略（这是服务器设置的），浏览器本身的缓存是客观存在的，具体让不让浏览器使用自己的缓存是服务器定的
// 浏览器可以理解为一个软件，本身提供了缓存的功能（同样，也默认提供了同源限制的策略）
// 是否要用浏览器的缓存功能和是否允许浏览器不采用默认的同源策略，则需要服务器（使用方）去设置
// 强缓存的优先级高于协商缓存，如果强缓存命中了则不考虑协商缓存。

// 浏览器的渲染过程：
// 1、构建DOM树和CSS-OM树
// 2、样式计算
// 3、样式布局
// 4、生成分层树
// 5、栅格化
// 6、显示

// 构建DOM树前是保证字节流转换成了字符串，然后字符串去一个一个消耗token